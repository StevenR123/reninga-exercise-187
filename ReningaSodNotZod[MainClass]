//AUTHOR: [Steven Reninga]
//Course: CPT 187
//PURPOSE: [Program allows users to buy different varieties of Sod while providing an item receipt for each purchase. It also provides a report on the total in sales and tracks the number and type of discounts used.]
//STARTDATE: [12/1/2020]
package edu.cpt187.reninga.exercise6;

import java.util.Scanner;

public class MainClass
{
	public static final char[] MENU_CHARS = {'A', 'B', 'Q'};
	public static final String[] MENU_OPTIONS = {"Login", "Create an Account", "Quit"};
	public static final char[] FILE_MENU_CHARS = {'A', 'B', 'R'};
	public static final String[] FILE_MENU_OPTIONS = {"Load Inventory", "Create Order", "Return to Main Menu"};
	public static final char[] SUB_MENU_CHARS = {'A', 'B', 'C', 'D'};
	public static final String INVENTORY_FILE_NAME = "MasterOrderFile.dat";
	public static final String ACCOUNTS_FILE_NAME = "MasterUserFile.dat";
	
	public static void main(String[] args)
	{
		//Create Scanner
		Scanner input = new Scanner(System.in);
		
		//Variables
		String userName = "";
		char menuSelection = ' ';
		
		//Create instance of Inventory
		Inventory currentInventory = new Inventory();
		
		//Create instance of Order
		Order currentOrder = new Order();
		
		//Create instance of WriteOrder
		WriteOrder orders = new WriteOrder(INVENTORY_FILE_NAME);
		
		//Create instance of UserAccounts
		UserAccounts currentUser = new UserAccounts(ACCOUNTS_FILE_NAME);
		
		//Welcome Banner
		displayWelcomeBanner();
		
		menuSelection = validateMenuSelection(input);
		
		//Run-while not Quit
		while(menuSelection != 'Q')
		{
			currentUser.setUserAccountArrays();
			userName = getUserName(input);
			
			if(menuSelection !='A')
			{
				currentUser.setSearchedIndex(userName);
				if(currentUser.getSearchedIndex() >= 0)
				{
					displayAccountResults(userName);
				}//END of if(currentUser.getSearchedIndex() >= 0)
				else
				{
					currentUser.setWriteOneRecord(userName, getPassword(input));
					displayAccountResults();
				}//END of else
			}//END of if(menuSelection !='A')
			
			else
			{
				currentUser.setSearchedIndex(userName, getPassword(input));
				if(currentUser.getSearchedIndex() < 0)
				{
					displayLoginError();
				}//END of if(currentUser.getSearchedIndex() < 0)
				else
				{
					menuSelection = validateFileSelection(input);
					
					while(menuSelection !='R')
					{
						if (menuSelection == 'A')
						{
							currentInventory.setLoadItems(getFileName(input));
							
							if(currentInventory.getRecordCount() <= 0)
							{
								displayNotOpen();
							}//END of if(currentInventory.getRecordCount() <= 0)
							else
							{
								displayRecordReport (currentInventory.getRecordCount());
							}//END of else
						}//END of if (menuSelection == 'A')
						else
						{				
							currentInventory.setSearchIndex(validateSearchValue(input));
							
							if (currentInventory.getItemSearchIndex() < 0)
							{
								displayNotFound();
							}//END of if (currentInventory.getItemSearchIndex() < 0)
							else
							{
								currentOrder.setLastItemSelectedIndex(currentInventory.getItemSearchIndex());
								currentOrder.setItemID(currentInventory.getItemIDs());
								currentOrder.setItemPrice(currentInventory.getItemPrices());
								currentOrder.setItemName(currentInventory.getItemNames());					
								currentOrder.setHowMany(validateHowMany(input));
								
								if(currentOrder.getInStockCount(currentInventory.getInStockCounts()) < currentOrder.getHowMany())
								{
									displayOutOfStock();
								}//END of if(currentOrder.getInStockCount(currentInventory.getInStockCounts()) < currentOrder.getHowMany())
								else
								{
									currentOrder.setDiscountType(validateDiscountMenu(input, currentInventory.getDiscountNames(), currentInventory.getDiscountRates()));
									currentOrder.setDiscountName(currentInventory.getDiscountNames());
									currentOrder.setDiscountRate(currentInventory.getDiscountRates());
									currentOrder.setDecreaseInStock(currentInventory);
									currentOrder.setPrizeName(currentInventory.getPrizeNames(), currentInventory.getRandomNumber());
									
									orders.setWriteOrder(currentOrder.getItemID(), currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), currentOrder.getTotalCost());
									
									if(currentOrder.getDiscountRate() > 0.0)
									{
										displayOrderReport(userName, currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), currentOrder.getDiscountName(), currentOrder.getDiscountRate(), currentOrder.getDiscountAmt(), currentOrder.getDiscountPrice(), currentOrder.getSubTotal(), currentOrder.getTaxRate(), currentOrder.getTaxAmt(), currentOrder.getTotalCost(), currentOrder.getPrizeName(), currentOrder.getInStockCount(currentInventory.getInStockCounts()));
									}//END of if(currentOrder.getDiscountRate() > 0.0)
									else
									{
										displayOrderReport(userName, currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), currentOrder.getSubTotal(), currentOrder.getTaxRate(), currentOrder.getTaxAmt(), currentOrder.getTotalCost(), currentOrder.getPrizeName(), currentOrder.getInStockCount(currentInventory.getInStockCounts()));
									}//END of else
								}//END of else
							}//END of else
						}//END of else
						menuSelection = validateFileSelection(input);
					}//END of while(menuSelection !='R')
				}//END of else
			}//END of else
			menuSelection = validateMenuSelection(input);
		}//END of while(menuSelection != 'Q')
		
		currentInventory.setLoadItems(orders.getFileName(), orders.getRecordCount());
		if(orders.getRecordCount() > 0)
		{
			displayFinalReport(currentInventory.getItemIDs(), currentInventory.getItemNames(), currentInventory.getItemPrices(), currentInventory.getOrderQuantities(), currentInventory.getOrderTotals(), currentInventory.getRecordCount(), currentInventory.getGrandTotal());
		}//END of if(orders.getRecordCount() > 0)
		
		//Farewell Message
		displayFarewellMessage();
		
		//Close Scanner
		input.close();
	}//END of Main Method
	
	//Welcome Banner
	public static void displayWelcomeBanner()
	{
		System.out.println("Welcome to SodnotZod's Electronic Sales Program.");
		System.out.println("This program will allow you to select which items you'd like");
		System.out.println("to purchase and calculate your transaction toatl.");
		System.out.println("");
	}//END OF Welcome Banner
	
	//Farewell Message
	public static void displayFarewellMessage()
	{
		System.out.println("Thank you for shopping at SodnotZod.");
		System.out.println("Have a wonderful day!");
	}//END of Farewell Message
	
	//Display Main Menu
	public static void displayMainMenu()
	{
		//Local Variables
		int localIndex = 0;
		
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("MAIN MENU");
		while (localIndex < MENU_CHARS.length)
		{
			System.out.printf("%-2s%-4s%-14s\n",MENU_CHARS[localIndex],"for",MENU_OPTIONS[localIndex]);
			localIndex++;
		}//END of while (localIndex < MENU_CHARS.length)
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter your selection here: ");
	}//END of displayMainMenu
	
	//Display Item Menu
	public static void displayFileMenu()
	{
		//Local Variables
		int localIndex = 0;
		
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("FILE MENU");
		while (localIndex < FILE_MENU_CHARS.length)
		{
			System.out.printf("%-2s%-4s%-14s\n",FILE_MENU_CHARS[localIndex],"for",FILE_MENU_OPTIONS[localIndex]);
			localIndex++;
		}//END of while (localIndex < FILE_MENU_CHARS.length)
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter your selection here: ");
	}//END of displayFileMenu
	
	//Display DiscountMenu
	public static void displayDiscountMenu(String[] borrowedDiscountNames, double[] borrowedDiscountRates)
	{
		//Local variables
		int localIndex = 0;
		
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("DISCOUNT MENU");
		while (localIndex < borrowedDiscountNames.length)
		{
			System.out.printf("%-2s%-4s%-18s%5.1f%2s\n",SUB_MENU_CHARS[localIndex],"for",borrowedDiscountNames[localIndex],borrowedDiscountRates[localIndex] * 100,"%");
			localIndex++;
		}//END of while (localIndex < borrowedDiscountNames.length)
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter your selection here: ");
	}//END of displayDiscountMenu
	
	//Display Order Report
	public static void displayOrderReport(String userName, String borrowedItemName, double borrowedItemPrice, int borrowedHowMany, double borrowedSubTotal, double borrowedTaxRate, double borrowedTaxAmt, double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCount)
	{
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");
		System.out.println("ORDER REPORT");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");
		System.out.printf("%-22s%-10s","Customer Name:",userName);
		System.out.println();
		System.out.printf("%-22s%-21s\n","Item Name:",borrowedItemName);
		System.out.printf("%-22s%-5s%6.2f\n","Item Price:","$",borrowedItemPrice);
		System.out.println();
		System.out.printf("%-22s%11d\n","Quantity",borrowedHowMany);
		System.out.println();
		System.out.printf("%-22s%-5s%6.2f\n","Subtotal:","$",borrowedSubTotal);
		System.out.printf("%-27s%5.1f%2s\n","Tax Rate",borrowedTaxRate * 100,"%");
		System.out.printf("%-22s%-5s%6.2f\n","Tax Amount:","$",borrowedTaxAmt);
		System.out.println();
		System.out.printf("%-22s%-5s%6.2f\n","Order Total:","$",borrowedTotalCost);
		System.out.println();
		System.out.printf("%-22s%-15s\n","Prize:",borrowedPrizeName);
		System.out.println();
		System.out.printf("%-19s%-3d%21s%-17s\n","Buy more now: Only",borrowedInStockCount,borrowedItemName,"s left in-stock!");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");
	}//END of displayOrderReport
	
	//Display Order Report
	public static void displayOrderReport(String userName, String borrowedItemName, double borrowedItemPrice, int borrowedHowMany, String borrowedDiscountName, double borrowedDiscountRate, double borrowedDiscountAmt, double borrowedDiscountPrice, double borrowedSubTotal, double borrowedTaxRate, double borrowedTaxAmt, double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCount)
	{
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");
		System.out.println("ORDER REPORT");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");
		System.out.printf("%-22s%-10s","Customer Name:",userName);
		System.out.println();
		System.out.printf("%-22s%-21s\n","Item Name:",borrowedItemName);
		System.out.printf("%-22s%-5s%6.2f\n","Item Price:","$",borrowedItemPrice);
		System.out.println();
		System.out.printf("%-22s%-14s\n","Discount Name:",borrowedDiscountName);
		System.out.printf("%-27s%5.1f%2s\n","Discount Rate:",borrowedDiscountRate * 100,"%");
		System.out.printf("%-22s%-5s%6.2f\n","Discount Amount:","$",borrowedDiscountAmt);
		System.out.printf("%-22s%-5s%6.2f\n","Discount Price:","$",borrowedDiscountPrice);
		System.out.println();
		System.out.printf("%-22s%11d\n","Quantity",borrowedHowMany);
		System.out.println();
		System.out.printf("%-22s%-5s%6.2f\n","Subtotal:","$",borrowedSubTotal);
		System.out.printf("%-27s%5.1f%2s\n","Tax Rate",borrowedTaxRate * 100,"%");
		System.out.printf("%-22s%-5s%6.2f\n","Tax Amount:","$",borrowedTaxAmt);
		System.out.println();
		System.out.printf("%-22s%-5s%6.2f\n","Order Total:","$",borrowedTotalCost);
		System.out.println();
		System.out.printf("%-22s%-15s\n","Prize:",borrowedPrizeName);
		System.out.println();
		System.out.printf("%-19s%-3d%21s%-17s\n","Buy more now: Only",borrowedInStockCount,borrowedItemName,"s left in-stock!");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");
	}//END of displayOrderReport
	
	//Display Final Report
	public static void displayFinalReport(int[] borrowedItemIDs, String[] borrowedItemNames, double[] borrowedItemPrices, int[] borrowedOrderQauntities, double[] borrowedOrderTotals, int borrowedRecordCount, double borrowedGrandTotal)
	{
		//Local Variables
		int localIndex = 0;
		
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");
		System.out.println("FINAL REPORT");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");
		System.out.println();
		System.out.printf("%-4s%-25s%-9s%-4s%-9s\n","ID","NAME","PRICE","QTY","TOTAL");
		while(localIndex < borrowedRecordCount)
		{
			System.out.printf("%-4d%-25s%-2s%-7.2f%-4d%-2s%-7.2f\n",borrowedItemIDs[localIndex],borrowedItemNames[localIndex],"$",borrowedItemPrices[localIndex],borrowedOrderQauntities[localIndex],"$",borrowedOrderTotals[localIndex]);
			localIndex++;
		}//END of while(localIndex < borrowedItemIDs.length)
		System.out.println();
		System.out.println("GRAND TOTAL");
		System.out.printf("%-2s%-6.2f\n","$",borrowedGrandTotal);
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");
	}//END of displayFinalReport
	
	//Display Out Of Stock
	public static void displayOutOfStock()
	{
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");		
		System.out.printf("%-40s\n","OUT OF STOCK ERROR");
		System.out.printf("%-40s\n","The quantity entered is greater than the quantity in-stock");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");		
	}//END of displayOutOfStock
	
	//Display Not Open
	public static void displayNotOpen()
	{
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");		
		System.out.printf("%-40s\n","FILE ERROR");
		System.out.printf("%-40s\n","The file named was not found or could not be opened");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");	
	}//END of displayNotOpen
	
	//Display Not Found
	public static void displayNotFound()
	{
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");		
		System.out.printf("%-40s\n","NOT FOUND ERROR");
		System.out.printf("%-40s\n","The search value entered was not found");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");	
	}//END of displayNotFound
	
	//Display Record Report
	public static void displayRecordReport(int borrowedRecordCount)
	{
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");		
		System.out.printf("%-40s\n","RECORD REPORT");
		System.out.printf("%-5d%-35s\n",borrowedRecordCount,"records processed");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");	
	}//END of displayRecordReport
	
	//Display File Name Prompt
	public static void displayFileNamePrompt()
	{
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");		
		System.out.printf("%-55s\n","Enter the file name with extension (i.e. file.txt):");	
	}//END of displayFileNamePrompt
	
	//Display Search Prompt
	public static void displaySearchPrompt()
	{
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");		
		System.out.printf("%-40s\n","Enter the search value:");	
	}//END of displaySearchPrompt
	
	//display Account Results
	public static void displayAccountResults()
	{
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");		
		System.out.println("ACCOUNT RESULTS");	
		System.out.println("New account created");		
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");		
	}//END of displayAccountResults
	
	//display Account Results
	public static void displayAccountResults(String userName)
	{
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");		
		System.out.println("ACCOUNT RESULTS");	
		System.out.printf("%-22s%-10s%-18s\n","Account not created: username, ",userName,", already exists");		
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");		
	}//END of displayAccountResults
	
	//display Password Prompt
	public static void displayPasswordPrompt()
	{
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");		
		System.out.println("Enter your password:");	
	}//END of displayPasswordPrompt
	
	//display Login Error
	public static void displayLoginError()
	{
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");		
		System.out.println("LOGIN ERROR");	
		System.out.println("Username and/or Password is incorrect");	
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");
	}//END of displayLoginError
	
	//Get User Name
	public static String getUserName(Scanner borrowedInput)
	{
		//Local Variable
		String localUserName = "";
		
		System.out.println("To get us started today could you tell me your name?");
		localUserName = borrowedInput.next();
		
		return localUserName;
	}//END OF getUserName
	
	//Validate Menu Selection
	public static char validateMenuSelection(Scanner borrowedInput)
	{
		//Local Variables
		char localSelection = ' ';
		
		//PRIME READ (Main Menu)
		displayMainMenu();
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		
		//Validation Loop
		while (localSelection !='A' && localSelection !='B' && localSelection !='Q')
		{
			System.out.println("Invailid Selection");
			System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			displayMainMenu();
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//END of while (localSelection !='A' && localSelection !='B' && localSelection !='Q')
		//END of PRIME READ (Main Menu)
		return localSelection;		
	}//END of validateMenuSelection
	
	//Validate File Selection
	public static char validateFileSelection(Scanner borrowedInput)
	{
		//Local Variables
		char localSelection = ' ';
		
		//PRIME READ (File Menu)
		displayFileMenu();
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		
		//Validation Loop
		while (localSelection !='A' && localSelection !='B' && localSelection !='R')
		{
			System.out.println("Invailid Selection");
			System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			displayFileMenu();
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//END of while (localSelection !='A' && localSelection !='B' && localSelection !='R')
		//END of PRIME READ (File Menu)
		return localSelection;		
	}//END of validateFileSelection
	
	//Validate How Many
	public static String validateHowMany(Scanner borrowedInput)
	{
		//Local Variable
		String localHowMany = "";
		
		//PRIME READ (How Many)
		System.out.print("Please enter how many you would like: ");
		localHowMany = borrowedInput.next();
		
		while (Integer.parseInt(localHowMany) <= 0)
		{
			//error message
			System.out.println("Invailid Selection");
			System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			//UPDATED READ
			System.out.print("Please enter how many bags you would like: ");
			localHowMany = borrowedInput.next();
		}//END OF while (Integer.parseInt(localHowMany) <= 0)
		//END OF PRIME READ (How Many)		
		return localHowMany;
	}//END OF validateHowMany
	
	//Validate Discount Menu
	public static char validateDiscountMenu(Scanner borrowedInput, String[] borrowedDiscountNames, double[] borrowedDiscountRates)
	{
		//LocalVariables
		char localSelection = ' ';
		
		//PRIME READ (Discount Menu)
		displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		
		//Validation Loop
		while (localSelection !='A' && localSelection !='B' && localSelection !='C')
		{
			System.out.println("Invailid Selection");
			System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//END of while (localSelection !='A' && localSelection !='B' && localSelection !='C')
		//END of PRIME READ (Discount Menu)
		return localSelection;	
	}//END of validateDiscountMenu
	
	//Get File Name
	public static String getFileName(Scanner borrowedInput)
	{
		String localFileName = "";
		
		displayFileNamePrompt();
		localFileName = borrowedInput.next();
		
		return localFileName;
	}//END of getFileName
	
	//Validate Search Value
	public static int validateSearchValue(Scanner borrowedInput)
	{
		int localSelection = 0;
		
		displaySearchPrompt();
		localSelection = borrowedInput.nextInt();
		
		//Validation Loop
		while (localSelection < 0)
		{
			//error message
			System.out.println("Invailid Selection");
			System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			//UPDATED READ
			displaySearchPrompt();
			localSelection = borrowedInput.nextInt();
		}//END of while (localSelection < 0)
		
		return localSelection;
	}//END of validateSearchValue
	
	//get Password
	public static String getPassword(Scanner borrowedInput)
	{
		String localPassword = "";
		
		displayPasswordPrompt();
		localPassword = borrowedInput.next();
		
		return localPassword;
	}//END of getPassword
	
}//END of Class
